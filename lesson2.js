//1. Дан код:
var a = 1, b = 1, c, d;
c = ++a; alert(c);           // 2 а с префиксным инкрементом, поэтому возвращает новое значение, увеличенное на 1
d = b++; alert(d);           // 1 b с постфиксным инкрементом, поэтому возвращает старое значение без увеличения. само b теперь = 2
c = (2+ ++a); alert(c);      // 5 в коде выше а у нас увеличилось, сейчас снова префиксный инкремент, а = 3, поэтому сумма = 5
d = (2+ b++); alert(d);      // 4 b с постфиксным инкрементом, поэтому берем старое значение b (=2). При этом б у нас увеличивается на 1 и становится равным 3
alert(a);                    // 3 значение а получено в 5 строке
alert(b);                    // 3 значение б получено в 6 строке
//Почему код даёт именно такие результаты?
/*
++ - инкремент, значение увеличивается на 1. 
Но префиксная форма возвращает новое значение, а постфиксная форма возвращает старое значение. 
При этом значение увеличивается на 1, и при повторном использовании переменной она идет уже с большим значением.
*/


//2. Чему будет равен x в примере ниже?
var a = 2;
var x = 1 + (a *= 2);
alert(x);
// a *= 2 то же самое, что и а = а * 2)
// поэтому х = 1 + (2 * 2) = 5


/*3. Объявить две целочисленные переменные a и b и задать им произвольные начальные значения. 
Затем написать скрипт, который работает по следующему принципу:
если a и b положительные, вывести их разность;
если а и b отрицательные, вывести их произведение;
если а и b разных знаков, вывести их сумму; ноль можно считать положительным числом.
*/

// a b уже объявлены в коде выше, так что просто присваиваю им новые значения тут
a = -2;
b = 3;
let result;
function calc(a, b) {
    if (a >= 0 && b >= 0) {
        result = a - b;
    } else if (a < 0 && b < 0) {
        result = a * b;
    } else {
        result = a + b;
    }
    return(result);
}
calc(a, b);
console.log(result);


//4. Присвоить переменной а значение в промежутке [0..15]. 
// С помощью оператора switch организовать вывод чисел от a до 15.
a = 5;
function numberLog(a) {

    while (a <= 15) {

        switch (a) {
            case a:
                console.log(a);
                break;
        
            default:
                break;
        }
        a++;
        
    }
}
numberLog(a);


//5. Реализовать основные 4 арифметические операции в виде функций с двумя параметрами. 
//Обязательно использовать оператор return.

function sumNumbers(a, b) {
    return a + b;
}

function subtractNumbers(a, b) {
    return a - b;
}

function multiplyNumbers(a, b) {
    return a * b;
}

function divideNumbers(a, b) {
    return a / b;
}


/* 6. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation), 
где arg1, arg2 – значения аргументов, operation – строка с названием операции. 
В зависимости от переданного значения операции выполнить одну из арифметических операций (использовать функции из пункта 5) 
и вернуть полученное значение (использовать switch).
*/

function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case sumNumbers:
            return sumNumbers(arg1, arg2);
        case subtractNumbers:
            return subtractNumbers(arg1, arg2);
        case multiplyNumbers:
            return multiplyNumbers(arg1, arg2);
        case divideNumbers:
            return divideNumbers(arg1, arg2);
        default:
            break;
    }
}